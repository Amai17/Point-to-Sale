
import java.awt.Frame;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Amai
 */
public class frmClase06 extends javax.swing.JDialog {

    //Declaro variable de connexion
    connection oConn = new  connection();
    
//Variables para las funciones propias
    Funciones  oFunc = new Funciones();
    
    //Enumeraciones para las operaciones
    enum eOperaciones {Insert,Delete,Update};
    
    //declaro variables de la operacion
    eOperaciones Operacion;
    
    /**
     * Creates new form frmClase06
     */
    public frmClase06(java.awt.Frame parent , boolean modal) {
       
        super(parent, modal);
        initComponents();
        
        //centra la forma
        this.setLocationRelativeTo(null);
        
        //carga el ListBox con los procesos
        SubProcesosCarga();
        
        //Carga el cboBox  con los roles
        SubRoleCarga();
        
        //Carga  las Claves
         SubClavesCarga();
         
         //Habilita los datos
         SubHabilitaCaptura(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtClave = new javax.swing.JTextField();
        choclave = new java.awt.Choice();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txpPass = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtRole = new javax.swing.JTextField();
        choRoles = new java.awt.Choice();
        txpRePass = new javax.swing.JPasswordField();
        jPanel4 = new javax.swing.JPanel();
        btnin = new javax.swing.JButton();
        btnup = new javax.swing.JButton();
        btndel = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnok = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstProcesos = new javax.swing.JList<>();

        jScrollPane1.setViewportView(jList1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Clave"));

        jLabel1.setText("Usuario:");

        txtClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClaveActionPerformed(evt);
            }
        });

        choclave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(choclave, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(choclave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle"));

        jLabel2.setText("Password:");

        jLabel3.setText("Name:");

        jLabel4.setText("Role:");

        jLabel5.setText("Re:");

        choRoles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choRolesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addComponent(choRoles, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txpPass, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txpRePass))
                    .addComponent(txtName))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txpPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txpRePass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(choRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones"));

        btnin.setText("Insertar");

        btnup.setText("Actualizar");

        btndel.setText("Eliminar");
        btndel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnup)
                .addGap(14, 14, 14)
                .addComponent(btndel)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnin)
                    .addComponent(btnup)
                    .addComponent(btndel))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Transaccion"));

        btnok.setText("Ok");
        btnok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnokActionPerformed(evt);
            }
        });

        btncancel.setText("Cancelar");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(btnok)
                .addGap(18, 18, 18)
                .addComponent(btncancel)
                .addGap(35, 35, 35))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnok)
                    .addComponent(btncancel))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesos"));

        lstProcesos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstProcesos);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
        //Carga los procesos existenttes a la lista
    private void SubProcesosCarga(){
        
        //Para instrucciones sql
        String sqlStmt;
        String sIdeProceso;
        String sNomProceso;
        
        //Variable para agregar  elementos a la lista
        DefaultListModel itemLista;
        itemLista = new DefaultListModel();
        
        //Limpia el control
        lstProcesos.removeAll();
        
        //Prepara variable para realizar el Query
        sqlStmt = "Select * from tblprocesos";
        
        if(oConn.FnBoolQueryExecute(sqlStmt)){
            
            try{
            while(oConn.setResult.next()){
                //Obtine los datos de la consulta
                sIdeProceso = oConn.setResult.getString("strProcesoIde");
                sNomProceso = oConn.setResult.getString("strProcesoNom");
                
                //Agrega el dato a la lista
                itemLista.addElement(sIdeProceso+"-"+sNomProceso);
            }
            
            //agragar el dato a la lista
            lstProcesos.setModel(itemLista);
            
            //cerrar los resultados
            oConn.setResult.close();    
        }
            catch(SQLException ex){
                
                //JOptionPane.showMessageDialog(rootPane, ex);
                oFunc.SubSistemaMensaje(ex.toString());
                 Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void SubInicializaCaptura(boolean bClave)
    {
        // Inicializa los datos de Captura
        if (bClave)
        txtClave.setText(null);
        txpPass.setText("");
        txpRePass.setText("");
        txtName.setText("");
        txtRole.setText("");
        choRoles.select(0);
        
        // Carga las Claves
        SubClavesCarga();
        
        // Carga los procesos
        SubProcesosCarga();
        
    }
    //Carga los procesos existentes de la lista
    private void SubRoleCarga(){
       //Para instruccion sql
       String sqlStmt;
       String sNomRole;
       
       //Limpia el control
       choRoles.removeAll();
       choRoles.addItem("Seleccione");
       
       //Prepara variable para realizar el Query
       sqlStmt = "Select distinct(strRoleName) from tblrolprocesos";
       
       if(oConn.FnBoolQueryExecute(sqlStmt)){
            
            try{
                //Verifica los resultados
            while(oConn.setResult.next()){
                //Obtine los datos de la consulta
                sNomRole= oConn.setResult.getString("strRoleName");
                
                //Agrega el elemento
               choRoles.addItem(sNomRole);
            }
            
            //cerrar los resultados
            oConn.setResult.close();    
        }
            catch(SQLException ex){
                
                //JOptionPane.showMessageDialog(rootPane, ex);
                oFunc.SubSistemaMensaje(ex.toString());
                 Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    private void SubClavesCarga(){
        
        //para instrucciones sql
        String sqlStmt;
        String sClave;
        
        //limpia el control
        choclave.removeAll();
        choclave.addItem("Seleccione");
        
        //prepara variable para realizar el Query
        sqlStmt = "Select strUserIde from tblusers";
        
        if(oConn.FnBoolQueryExecute(sqlStmt)){
            try{
                //verifica resultados
                while (oConn.setResult.next()){
                    //obtine los datos de la consulta
                    sClave = oConn.setResult.getString("strUserIde");
                    
                    //agrega el elemento
                    choclave.addItem(sClave);
                }
                //cerrar los resultados
            oConn.setResult.close(); 
            }
             catch(SQLException ex){
                
                //JOptionPane.showMessageDialog(rootPane, ex);
                oFunc.SubSistemaMensaje(ex.toString());
                 Logger.getLogger(frmClase05.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    private void SubHabilitaCaptura(boolean bHabilita){
        //Habilita/ Deshabilita la clave
        txtClave.setEnabled(! bHabilita);
        choclave.setEnabled(! bHabilita);
        
        //Habilita /Deshabilita detalles
        txpPass.setEnabled(bHabilita);
        txpRePass.setEnabled(bHabilita);
        txpRePass.setEnabled(bHabilita);
        txtName.setEnabled(bHabilita);
        txtRole.setEnabled(bHabilita);
        choRoles.setEnabled(bHabilita);
        lstProcesos.setEnabled(bHabilita);
        
        //Habilita /Deshabilita Operaciones
         btnin.setEnabled(! bHabilita);
         btnup.setEnabled(! bHabilita);
         btndel.setEnabled(! bHabilita);
         
         //Habilita /Deshabilita Capturas
         btnok.setEnabled(! bHabilita);
         btncancel.setEnabled(! bHabilita);
         
         if(bHabilita){
             //Coloca el foco
             txpPass.requestFocus();
         }
    }
    private void SubInsertUser(){
        String strSqlStmt;
        String sPass;
        
        //cooca la transaccion a true
        oConn.SubAutoCommit(false);
        
        //quita encriptamiento del password
         sPass = new String(txpPass.getPassword());
        
        //prepara el query
        strSqlStmt = " Insert into tblUsers (strUserIde,strUserPass,strUserName,strRoleName)";
        strSqlStmt += " Values ('"+txtClave.getText().toString()+"', ";
        strSqlStmt += " '"+sPass+"','"+txtName.getText().toString()+"',";
        strSqlStmt += " '"+txtRole.getText().toString()+"')";    
        
        //ejecuta el query
        if(oConn.FnBoolQueryExecuteUpdate(strSqlStmt)){
            //elimina el role proceso asociado
            subDeleteRoleProcesos();
            
        //ejecuta la insercion
        if(fnBoolInsertaRoleProcesos()){
//            oConn.SubCommit();
        //mensaje
        oFunc.SubSistemaMensaje("Se ha realizado Insert con exito");
        }
    
        else
            oConn.SubRollBack();
        //mensaje
            
        }
        else
            //realiza el roolback
            oConn.SubRollBack();
    }
    //proceso para el update
    private void SubUpdateUser(){
        
        String strSqlStmt;
        String sPass;
        // Coloca la transacción a true
        oConn.SubAutoCommit(false);
        // Quita encriptamiento al password
        sPass = new String(txpPass.getPassword());
        // Prepara el Query
        strSqlStmt  = " Update tblUsers ";
        strSqlStmt += " Set strUserPass='"+sPass.toString()+"', ";
        strSqlStmt += "     strUserName='"+txtName.getText().toString()+"', ";
        strSqlStmt += "     strRoleName='"+txtRole.getText().toString()+"' ";
        strSqlStmt += " Where strUserIde='"+txtClave.getText().toString()+"' ";

        // Ejecuta el Query
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt))
        {    
           // Elimina el Role Proceso asociado
           subDeleteRoleProcesos();
           
           // Ejecuta Inserción
           if (fnBoolInsertaRoleProcesos())
           {
               oConn.SubCommit();
               // Mensaje
               oFunc.SubSistemaMensaje("Se ha realizado Update con Éxito");           
           }
           else
               oConn.SubRollBack();
        }
        else
            // realiza el rollback
            oConn.SubRollBack();
    }
    
     private void SubSeleccionaProceso(String strProceso)
    {
        int iPosicion;
        int [] iSeleccionados;
        iSeleccionados = new int[lstProcesos.getModel().getSize()]; //tamaño del arreglo es 3 elementos
        String sElemento;
        
        for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            System.out.println("Comparando Elemento:" + sElemento +" con:"+strProceso);
            
            if (sElemento.contentEquals(strProceso))
            {
               //lstProcesos.setSelectedIndex(iPosicion);
               iSeleccionados[iPosicion]= iPosicion;
            }
            else
                iSeleccionados[iPosicion]=-1;
        }
        
        // Asigna el Vector de Seleccionados
        lstProcesos.setSelectedIndices(iSeleccionados);
        
    }
     private void SubSeleccionaRole(String strRole)
    {
        int iPosicion;
        String sElemento;
        
        for (iPosicion = 0; iPosicion < choRoles.getItemCount();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            System.out.println("Comparando Elemento:" + sElemento +" con:"+strRole);
            
            // Compara el Elemento
            if (sElemento.contentEquals(strRole))
            {
               choRoles.select(iPosicion);
               break;
            }
        }
                
    }
     
    private void SubDeleteUser(){
        
        String strSqlStmt;
        //prepara el Query
        strSqlStmt = " Delete from tblUsers ";
        strSqlStmt += " Where strUserIde='"+txtClave.getText().toString()+"'";
        
        //Ejecuta el Query
        if(oConn.FnBoolQueryExecuteUpdate(strSqlStmt))
        {
            //mensaje
            oFunc.SubSistemaMensaje("Se ha realizado update con exito");
        }
    }
    private boolean fnBoolDatosOk(){
        
        // Variable para el Mensaje
        String sMessage="";
        String sPass="";
        String sRePass="";
        
        // Valida el
        if (txpPass.getPassword().length==0)
        {
            // Añade el Usuario al Mensaje
            sMessage = "Password";
            
            // Coloca el Foco en el Objeto
            txpPass.requestFocus();
        }
        
        // Quito encriptamiento a los passwords
        sPass = new String(txpPass.getPassword());
       sRePass =new String(txpRePass.getPassword());
        
        // Valida el Password
        if ( ! sPass.equals(sRePass) )
        {
            // Valida si no falló con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txpPass.requestFocus();
            
            // Añade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"Re Password";
        }

        
        // Valida el Nombre
        if (txtName.getText().length()<=0)
        {
            // Valida si no falló con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txtName.requestFocus();
            
            // Añade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"El Nombre";
        }

        // Valida el Role
        if (txtRole.getText().length()<=0)
        {
            // Valida si no falló con el usuario para mandar el foco
            if (sMessage.length()==0)
                
                // Mando el Foco al Password si no ha fallado algun dato previo
                txtRole.requestFocus();
            
            // Añade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"El role";
        }
        
        // Valida los procesos seleccionados
        if (lstProcesos.isSelectionEmpty())
        {
            // Añade el Usuario al Mensaje
            sMessage = sMessage+"\n"+"Debe Seleccionar un Proceso";
        }
        
        // Verifica si hay que desplegar el Mensaje
        if (sMessage.length() > 0)
        {
            //Prepara el Mensaje
            sMessage = "Debe de Capturar los siguiente datos:\n"+sMessage;
            JOptionPane.showMessageDialog(null, sMessage);
            
            // Devuelve falso
            return false;
        }
        else
        {
            // Retorna Correcto
            return true;    
        }
        
    }
    private boolean FnBoolExisteUsuario(){
         
        //variables para el Query
        String sQuery;
        Boolean bResult=false;
        
        //Prepara el Query
        sQuery ="Select * from tblusers";
        sQuery = sQuery + " Where strUserIde='"+txtClave.getText()+"'";
        
        //Ejecuta el Query
        oConn.FnBoolQueryExecute(sQuery);
        
        //Capturo el error
        try{
            // Verifico  que haya  habido resultados
            if(oConn.setResult.next()){
                //Coloca los Datos
                txpPass.setText(oConn.setResult.getString("strUserPass"));
                txpRePass.setText(oConn.setResult.getString("strUserPass"));
                txtName.setText(oConn.setResult.getString("strUserName"));
                txtRole.setText(oConn.setResult.getString("strRoleName"));
                
                //Cierro los resultados
                oConn.setResult.close();
                
                //Resultado
                bResult = true;
            } 
        }
        catch (SQLException ex ) {
             oFunc.SubSistemaMensaje("FnBoolExisteUsuaruio:"+ex.getMessage().toString());
         }
            if(bResult)
                SubCargaRoleProcesos();
            
            //Retorna el resultado
            return bResult;
        }
        
    private void SubCargaRoleProcesos(){
          
          String sQuery;
          String sElemento;
          String sProceso;
          int iPosicion;
          int [] iSeleccionados;
          iSeleccionados = new  int[lstProcesos.getModel().getSize()]; //tamaño del arreglo
          
          //Inicia el vector de seleccionados
          for(iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
          {
               //Coloca la posicion  de´-1
               iSeleccionados[iPosicion]= -1;
          }
          //Prepara el Query oara los  Procesos
          sQuery = "Select * from  tblrolprocesos Where strRoleName='"+txtRole.getText().toString()+"'";
          
          //Ejecutamos el Query para la nueva consulta
          oConn.FnBoolQueryExecute(sQuery);
          
          //Captura el error
          try{
              //Verifico que haya habido resultados
              while (oConn.setResult.next()){
                  //Obtengo el proceso
                  sProceso =oConn.setResult.getString ("strProcesoIde");
                  
                  for(iPosicion =0; iPosicion < lstProcesos.getModel().getSize();iPosicion++){
                      
                      //Obtiene el elemento de la lista
                      sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
                      sElemento = sElemento.substring(0,10);
                      System.out.println("Comprobando Elemento:" + sElemento +" con:"+sProceso);
                      
                      if(sElemento.contentEquals(sProceso))
                      {
                          //lstProcesos
                          iSeleccionados[iPosicion]= iPosicion;
                      }
                  }    
              }
              
               //Asigna el vector  de seleccionados
                  lstProcesos.setSelectedIndices(iSeleccionados);
              //cierro los resultados
              oConn.setResult.close();
          }
          catch(SQLException ex){
              oFunc.SubSistemaMensaje("SubGetRoleProcesos:"+ex.getMessage().toString());
          }
        
         }
    private void subDeleteRoleProcesos(){
            
            //Variable para el query
            String sQuery;
            Boolean bResult=false;
            
            //Prepara el Query para Eliminar
            sQuery =" Delete from tblroleprocesos ";
            sQuery = sQuery + "Where  strRoleName ='"+txtRole.getText().toString()+"'";
            
            //Ejecuta el Query para Borrar
            oConn.FnBoolQueryExecuteUpdate(sQuery);
            
        }
    private boolean fnBoolInsertaRoleProcesos(){
            int iPosicion;
            String sElemento;
            String sQuery;
            boolean bResult=true;
            
            for(iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++){
                
                //Obtiene el elemento de la lista
                sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
                sElemento = sElemento.substring(0,10);
                
                //Verifica si esta seleccionado
                if(lstProcesos.isSelectedIndex(iPosicion)){
                    
                    //Prepara Query para insersion
                    sQuery = " Insert into tblRoleProcesos ";
                    sQuery = sQuery + " (strRoleName,strProcesoIde) ";
                    sQuery = sQuery + " value ('"+txtRole.getText().toString()+"','"+sElemento+"')";
                    
                    //Ejecuta Inserccion
                    if(! oConn.FnBoolQueryExecuteUpdate(sQuery))
                        bResult = false;
                } 
            }
            //Retorna
            return (bResult);
        }
    private void  SubSeleccionaProcesos(String strProceso){
    int iPosicion;
        int [] iSeleccionados;
        iSeleccionados = new int[lstProcesos.getModel().getSize()]; //tamaño del arreglo es 3 elementos
        String sElemento;
        
        for (iPosicion = 0; iPosicion < lstProcesos.getModel().getSize();iPosicion++)
        {
            // Obtiene el Elemento de la lista
            sElemento = lstProcesos.getModel().getElementAt(iPosicion).toString();
            sElemento = sElemento.substring(0,10);                       
            System.out.println("Comparando Elemento:" + sElemento +" con:"+strProceso);
            
            if (sElemento.contentEquals(strProceso))
            {
               //lstProcesos.setSelectedIndex(iPosicion);
               iSeleccionados[iPosicion]= iPosicion;
            }
            else
                iSeleccionados[iPosicion]=-1;
        }
        
        // Asigna el Vector de Seleccionados
        lstProcesos.setSelectedIndices(iSeleccionados);
}

    private void txtClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClaveActionPerformed

    private void choclaveItemStateChanged(java.awt.event.ItemEvent evt){
        // TODO add your handling code here:
        if (! choclave.getSelectedItem().toString().equals("Seleccione")){
            //Coloca el texto en el Role
            txtClave.setText(choclave.getSelectedItem().toString());
            
            //Caega de nuevo los procesos
            FnBoolExisteUsuario();
            
        }
    }
   
    private void btninActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninActionPerformed
        // TODO add your handling code here:
        //Valida que aya capturado algo
        //Valida el usuario
        if(txtClave.getText().length()==0){
            
            //Despliego el Mensaje
            oFunc.SubSistemaMensaje("Debe caprurar la clavea Insertar");
            
            //Coloca la clave en el objeto
            txtClave.requestFocus();
        }
        
        else
            //Valido que el usuario exista
            if(FnBoolExisteUsuario())
                
                //Despliego el Mensaje
                oFunc.SubSistemaMensaje("La clave a insertar ya existe");
                else
                {
                        //Inicializa captura
//                    SubInicializaCaptura(false);
                        
        //Especifica la operacion
                        Operacion = eOperaciones.Insert;
                        
                        //  Habilita captura
                       SubHabilitaCaptura(true);
                        }
    }//GEN-LAST:event_btninActionPerformed

    private void btnupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupActionPerformed
        // TODO add your handling code here:
         if(txtClave.getText().length()==0){
             
               //Despliego el Mensaje
            oFunc.SubSistemaMensaje("Debe capturar la clave a modificar");
            //Coloca la clave en el objeto
            txtClave.requestFocus();
            
         }
         else
             if(! FnBoolExisteUsuario())
                 //Despliego el Mensaje
                 oFunc.SubSistemaMensaje("la clave a modificar no existe");
         else
             {
                 //Especifica la operacion+
                 Operacion = eOperaciones.Update;
                 
                 //Habilita la captura
                 SubHabilitaCaptura(true);
             }
    }//GEN-LAST:event_btnupActionPerformed

    private void btndelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndelActionPerformed
        // TODO add your handling code here:
        //Valida que ya capturado algo
        //Valida el usuario
        if(txtClave.getText().length()==0){
            
            //Despliego el mensaje
            oFunc.SubSistemaMensaje("Debe capturar la clave a eliminar");
            
            //coloca el foco en el objeto
            txtClave.requestFocus();
            
        }
        else
            if(! FnBoolExisteUsuario())
                //Despliego el mensaje
                  oFunc.SubSistemaMensaje("La clave a eliminar no existe");
            else{
                
                //Especifica la operacion
                Operacion = eOperaciones.Delete;
                
                //Habilita la captura
                SubHabilitaCaptura(true);
                
                //coloca el foco en ok
                btnok.requestFocus();
            }
                
    }//GEN-LAST:event_btndelActionPerformed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed
        // TODO add your handling code here:
        SubInicializaCaptura(true);
        SubHabilitaCaptura(false);
        SubProcesosCarga();
    }//GEN-LAST:event_btncancelActionPerformed

    private void btnokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnokActionPerformed
        // TODO add your handling code here:
         // Valida que los datos esté correctos
          if (fnBoolDatosOk())
        {
            //Llama rutina de Transaccion
            if (Operacion == eOperaciones.Update)
                SubUpdateUser();
            else if  (Operacion == eOperaciones.Insert)
                SubInsertUser();
            else 
                SubDeleteUser();
            
            // Inicializa y Habilita Captura
            SubInicializaCaptura(true);
            SubHabilitaCaptura(false);
            SubProcesosCarga();
            SubRoleCarga();
        }
    }//GEN-LAST:event_btnokActionPerformed

    private void choRolesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choRolesItemStateChanged
        // TODO add your handling code here:
         if (! choRoles.getSelectedItem().toString().equals("Seleccione"))
        {
            // Coloca el texto en el Role
            txtRole.setText(choRoles.getSelectedItem().toString());
            // Carga de Nuevo los Procesos
            SubCargaRoleProcesos();
        }
    }//GEN-LAST:event_choRolesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmClase06.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmClase06 dialog = new frmClase06(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btndel;
    private javax.swing.JButton btnin;
    private javax.swing.JButton btnok;
    private javax.swing.JButton btnup;
    private java.awt.Choice choRoles;
    private java.awt.Choice choclave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstProcesos;
    private javax.swing.JPasswordField txpPass;
    private javax.swing.JPasswordField txpRePass;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtRole;
    // End of variables declaration//GEN-END:variables
}
